fun box(): String {
  return test1().plus(other = test2())
}

fun test1(): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    val tmp_0: VariableDiagram
    val tmp_1: VariableDiagram
    val tmp_2: VariableDiagram
    @Explain
    val hello: String = "Hello"
    @Explain
    val world: String = { // BLOCK
      val tmp_3: String = "World".substring(startIndex = 1, endIndex = 4)
      tmp_0 = VariableDiagram(source = "@Explain val world = \"World\".substring(1, 4)", assignment = Assignment(expressions = listOf</* null */>(elements = [Expression(startOffset = 29, endOffset = 44, displayOffset = 29, value = tmp_3)])))
      tmp_3
    }
    @Explain
    val expected: Int = { // BLOCK
      val tmp_4: Int = hello.<get-length>()
      tmp_1 = VariableDiagram(source = "@Explain\nval expected =\n    hello.length", assignment = Assignment(expressions = listOf</* null */>(elements = [Expression(startOffset = 28, endOffset = 33, displayOffset = 28, value = hello), Expression(startOffset = 34, endOffset = 40, displayOffset = 34, value = tmp_4)])))
      tmp_4
    }
    @Explain
    val actual: Int = { // BLOCK
      val tmp_5: Int = world.<get-length>()
      tmp_2 = VariableDiagram(source = "@Explain val actual = world.length", assignment = Assignment(expressions = listOf</* null */>(elements = [VariableAccessExpression(startOffset = 22, endOffset = 27, displayOffset = 22, value = world, diagram = tmp_0), Expression(startOffset = 28, endOffset = 34, displayOffset = 28, value = tmp_5)])))
      tmp_5
    }
    { // BLOCK
      val tmp_6: Boolean = EQEQ(arg0 = expected, arg1 = actual)
      assert(value = tmp_6, lazyMessage = local fun <anonymous>(): String {
        return "\n" + CallDiagram(source = "assert(expected == actual)", dispatchReceiver = Receiver(expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [VariableAccessExpression(startOffset = 7, endOffset = 15, displayOffset = 7, value = expected, diagram = tmp_1), VariableAccessExpression(startOffset = 19, endOffset = 25, displayOffset = 19, value = actual, diagram = tmp_2), EqualityExpression(startOffset = 7, endOffset = 25, displayOffset = 16, value = tmp_6, lhs = expected, rhs = actual)])))])).toDefaultMessage()
      }
)
    }
  }
)
}

fun test2(): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    test2_run()
  }
)
}

@Explain
fun test2_run() {
  val tmp_7: VariableDiagram
  val tmp_8: VariableDiagram
  @Explain
  val expected: Int = { // BLOCK
    val tmp_9: Int = "Hello".<get-length>()
    tmp_7 = VariableDiagram(source = "val expected = \"Hello\".length", assignment = Assignment(expressions = listOf</* null */>(elements = [Expression(startOffset = 23, endOffset = 29, displayOffset = 23, value = tmp_9)])))
    tmp_9
  }
  @Explain
  val actual: Int = { // BLOCK
    val tmp_10: String = "World".substring(startIndex = 1, endIndex = 4)
    val tmp_11: Int = tmp_10.<get-length>()
    tmp_8 = VariableDiagram(source = "val actual = \"World\".substring(1, 4).length", assignment = Assignment(expressions = listOf</* null */>(elements = [Expression(startOffset = 21, endOffset = 36, displayOffset = 21, value = tmp_10), Expression(startOffset = 37, endOffset = 43, displayOffset = 37, value = tmp_11)])))
    tmp_11
  }
  { // BLOCK
    val tmp_12: Boolean = EQEQ(arg0 = expected, arg1 = actual)
    assert(value = tmp_12, lazyMessage = local fun <anonymous>(): String {
      return "\n" + CallDiagram(source = "assert(expected == actual)", dispatchReceiver = Receiver(expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [VariableAccessExpression(startOffset = 7, endOffset = 15, displayOffset = 7, value = expected, diagram = tmp_7), VariableAccessExpression(startOffset = 19, endOffset = 25, displayOffset = 19, value = actual, diagram = tmp_8), EqualityExpression(startOffset = 7, endOffset = 25, displayOffset = 16, value = tmp_12, lhs = expected, rhs = actual)])))])).toDefaultMessage()
    }
)
  }
}

