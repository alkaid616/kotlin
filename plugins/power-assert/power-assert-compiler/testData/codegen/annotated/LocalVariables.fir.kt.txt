fun box(): String {
  return test1().plus(other = test2())
}

fun test1(): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    val tmp0_worldExplanation: VariableExplanation
    val tmp1_expectedExplanation: VariableExplanation
    val tmp2_actualExplanation: VariableExplanation
    @Explain
    val hello: String = "Hello"
    @Explain
    val world: String = { // BLOCK
      val tmp0_Explain: String = "World".substring(startIndex = 1, endIndex = 4)
      tmp0_worldExplanation = VariableExplanation(source = "@Explain val world = \"World\".substring(1, 4)", initializer = Initializer(expressions = listOf</* null */>(elements = [Expression(startOffset = 29, endOffset = 44, displayOffset = 29, value = tmp0_Explain)])))
      tmp0_Explain
    }
    @Explain
    val expected: Int = { // BLOCK
      val tmp0_Explain: String = hello
      val tmp1_Explain: Int = tmp0_Explain.<get-length>()
      tmp1_expectedExplanation = VariableExplanation(source = "@Explain\nval expected =\n    hello.length", initializer = Initializer(expressions = listOf</* null */>(elements = [Expression(startOffset = 28, endOffset = 33, displayOffset = 28, value = tmp0_Explain), Expression(startOffset = 34, endOffset = 40, displayOffset = 34, value = tmp1_Explain)])))
      tmp1_Explain
    }
    @Explain
    val actual: Int = { // BLOCK
      val tmp0_Explain: Int = world.<get-length>()
      tmp2_actualExplanation = VariableExplanation(source = "@Explain val actual = world.length", initializer = Initializer(expressions = listOf</* null */>(elements = [VariableAccessExpression(startOffset = 22, endOffset = 27, displayOffset = 22, value = world, explanation = tmp0_worldExplanation), Expression(startOffset = 28, endOffset = 34, displayOffset = 28, value = tmp0_Explain)])))
      tmp0_Explain
    }
    { // BLOCK
      val tmp0_Explain: Boolean = EQEQ(arg0 = expected, arg1 = actual)
      assert(value = tmp0_Explain, lazyMessage = local fun <anonymous>(): String {
        return "\n" + CallExplanation(source = "assert(expected == actual)", dispatchReceiver = Receiver(expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [VariableAccessExpression(startOffset = 7, endOffset = 15, displayOffset = 7, value = expected, explanation = tmp1_expectedExplanation), VariableAccessExpression(startOffset = 19, endOffset = 25, displayOffset = 19, value = actual, explanation = tmp2_actualExplanation), EqualityExpression(startOffset = 7, endOffset = 25, displayOffset = 16, value = tmp0_Explain, lhs = expected, rhs = actual)])))])).toDefaultMessage()
      }
)
    }
  }
)
}

fun test2(): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    test2_run()
  }
)
}

@Explain
fun test2_run() {
  val tmp0_expectedExplanation: VariableExplanation
  val tmp1_actualExplanation: VariableExplanation
  val expected: Int = { // BLOCK
    val tmp0_Explain: Int = "Hello".<get-length>()
    tmp0_expectedExplanation = VariableExplanation(source = "val expected = \"Hello\".length", initializer = Initializer(expressions = listOf</* null */>(elements = [Expression(startOffset = 23, endOffset = 29, displayOffset = 23, value = tmp0_Explain)])))
    tmp0_Explain
  }
  val actual: Int = { // BLOCK
    val tmp0_Explain: String = "World".substring(startIndex = 1, endIndex = 4)
    val tmp1_Explain: Int = tmp0_Explain.<get-length>()
    tmp1_actualExplanation = VariableExplanation(source = "val actual = \"World\".substring(1, 4).length", initializer = Initializer(expressions = listOf</* null */>(elements = [Expression(startOffset = 21, endOffset = 36, displayOffset = 21, value = tmp0_Explain), Expression(startOffset = 37, endOffset = 43, displayOffset = 37, value = tmp1_Explain)])))
    tmp1_Explain
  }
  { // BLOCK
    val tmp0_Explain: Boolean = EQEQ(arg0 = expected, arg1 = actual)
    assert(value = tmp0_Explain, lazyMessage = local fun <anonymous>(): String {
      return "\n" + CallExplanation(source = "assert(expected == actual)", dispatchReceiver = Receiver(expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [VariableAccessExpression(startOffset = 7, endOffset = 15, displayOffset = 7, value = expected, explanation = tmp0_expectedExplanation), VariableAccessExpression(startOffset = 19, endOffset = 25, displayOffset = 19, value = actual, explanation = tmp1_actualExplanation), EqualityExpression(startOffset = 7, endOffset = 25, displayOffset = 16, value = tmp0_Explain, lhs = expected, rhs = actual)])))])).toDefaultMessage()
    }
)
  }
}

