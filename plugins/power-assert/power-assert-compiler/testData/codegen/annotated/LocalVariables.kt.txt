fun box(): String {
  return test1().plus(other = test2())
}

fun test1(): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    val tmp0_PowerAssertVariableDiagram: VariableDiagram
    val tmp1_PowerAssertVariableDiagram: VariableDiagram
    val tmp2_PowerAssertVariableDiagram: VariableDiagram
    @Explain
    val hello: String = "Hello"
    @Explain
    val world: String = { // BLOCK
      val tmp0_PowerAssertSynthesized: String = "World".substring(startIndex = 1, endIndex = 4)
      tmp0_PowerAssertVariableDiagram = VariableDiagram(source = "@Explain val world = \"World\".substring(1, 4)", assignment = Assignment(expressions = listOf</* null */>(elements = [Expression(startOffset = 29, endOffset = 44, displayOffset = 29, value = tmp0_PowerAssertSynthesized)])))
      tmp0_PowerAssertSynthesized
    }
    @Explain
    val expected: Int = { // BLOCK
      val tmp0_PowerAssertSynthesized: String = hello
      val tmp1_PowerAssertSynthesized: Int = tmp0_PowerAssertSynthesized.<get-length>()
      tmp1_PowerAssertVariableDiagram = VariableDiagram(source = "@Explain\nval expected =\n    hello.length", assignment = Assignment(expressions = listOf</* null */>(elements = [Expression(startOffset = 28, endOffset = 33, displayOffset = 28, value = tmp0_PowerAssertSynthesized), Expression(startOffset = 34, endOffset = 40, displayOffset = 34, value = tmp1_PowerAssertSynthesized)])))
      tmp1_PowerAssertSynthesized
    }
    @Explain
    val actual: Int = { // BLOCK
      val tmp0_PowerAssertSynthesized: Int = world.<get-length>()
      tmp2_PowerAssertVariableDiagram = VariableDiagram(source = "@Explain val actual = world.length", assignment = Assignment(expressions = listOf</* null */>(elements = [VariableAccessExpression(startOffset = 22, endOffset = 27, displayOffset = 22, value = world, diagram = tmp0_PowerAssertVariableDiagram), Expression(startOffset = 28, endOffset = 34, displayOffset = 28, value = tmp0_PowerAssertSynthesized)])))
      tmp0_PowerAssertSynthesized
    }
    { // BLOCK
      val tmp0_PowerAssertSynthesized: Boolean = EQEQ(arg0 = expected, arg1 = actual)
      assert(value = tmp0_PowerAssertSynthesized, lazyMessage = local fun <anonymous>(): String {
        return "\n" + CallDiagram(source = "assert(expected == actual)", dispatchReceiver = Receiver(expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [VariableAccessExpression(startOffset = 7, endOffset = 15, displayOffset = 7, value = expected, diagram = tmp1_PowerAssertVariableDiagram), VariableAccessExpression(startOffset = 19, endOffset = 25, displayOffset = 19, value = actual, diagram = tmp2_PowerAssertVariableDiagram), EqualityExpression(startOffset = 7, endOffset = 25, displayOffset = 16, value = tmp0_PowerAssertSynthesized, lhs = expected, rhs = actual)])))])).toDefaultMessage()
      }
)
    }
  }
)
}

fun test2(): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    test2_run()
  }
)
}

@Explain
fun test2_run() {
  val tmp0_PowerAssertVariableDiagram: VariableDiagram
  val tmp1_PowerAssertVariableDiagram: VariableDiagram
  val expected: Int = { // BLOCK
    val tmp0_PowerAssertSynthesized: Int = "Hello".<get-length>()
    tmp0_PowerAssertVariableDiagram = VariableDiagram(source = "expected = \"Hello\".length", assignment = Assignment(expressions = listOf</* null */>(elements = [Expression(startOffset = 19, endOffset = 25, displayOffset = 19, value = tmp0_PowerAssertSynthesized)])))
    tmp0_PowerAssertSynthesized
  }
  val actual: Int = { // BLOCK
    val tmp0_PowerAssertSynthesized: String = "World".substring(startIndex = 1, endIndex = 4)
    val tmp1_PowerAssertSynthesized: Int = tmp0_PowerAssertSynthesized.<get-length>()
    tmp1_PowerAssertVariableDiagram = VariableDiagram(source = "actual = \"World\".substring(1, 4).length", assignment = Assignment(expressions = listOf</* null */>(elements = [Expression(startOffset = 17, endOffset = 32, displayOffset = 17, value = tmp0_PowerAssertSynthesized), Expression(startOffset = 33, endOffset = 39, displayOffset = 33, value = tmp1_PowerAssertSynthesized)])))
    tmp1_PowerAssertSynthesized
  }
  { // BLOCK
    val tmp0_PowerAssertSynthesized: Boolean = EQEQ(arg0 = expected, arg1 = actual)
    assert(value = tmp0_PowerAssertSynthesized, lazyMessage = local fun <anonymous>(): String {
      return "\n" + CallDiagram(source = "assert(expected == actual)", dispatchReceiver = Receiver(expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [VariableAccessExpression(startOffset = 7, endOffset = 15, displayOffset = 7, value = expected, diagram = tmp0_PowerAssertVariableDiagram), VariableAccessExpression(startOffset = 19, endOffset = 25, displayOffset = 19, value = actual, diagram = tmp1_PowerAssertVariableDiagram), EqualityExpression(startOffset = 7, endOffset = 25, displayOffset = 16, value = tmp0_PowerAssertSynthesized, lhs = expected, rhs = actual)])))])).toDefaultMessage()
    }
)
  }
}

