fun box(): String {
  return test1(str = "TEST", default = 0).plus(other = test1(str = null, default = 0)).plus(other = test2(str = "TEST", fallback = null, default = 0)).plus(other = test2(str = null, fallback = "test", default = 0)).plus(other = test2(str = null, fallback = null, default = 0))
}

fun test1(str: String?, default: Int): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    { // BLOCK
      val tmp_0: String? = str
      val tmp_1: String? = { // BLOCK
        val tmp_2: String? = tmp_0
        when {
          EQEQ(arg0 = tmp_2, arg1 = null) -> null
          else -> tmp_2.lowercase()
        }
      }
      val tmp_3: Int? = { // BLOCK
        val tmp_4: String? = tmp_1
        when {
          EQEQ(arg0 = tmp_4, arg1 = null) -> null
          else -> tmp_4.<get-length>()
        }
      }
      when {
        EQEQ(arg0 = tmp_3, arg1 = null) -> { // BLOCK
          val tmp_5: Int = default
          val tmp_6: Boolean = EQEQ(arg0 = tmp_5, arg1 = 5)
          assert(value = tmp_6, lazyMessage = local fun <anonymous>(): String {
            return "\n" + CallDiagram(source = "assert((str?.lowercase()?.length ?: default) == 5)", dispatchReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [Expression(startOffset = 277, endOffset = 280, displayOffset = 8, value = tmp_0), Expression(startOffset = 282, endOffset = 293, displayOffset = 13, value = tmp_1), Expression(startOffset = 295, endOffset = 301, displayOffset = 26, value = tmp_3), Expression(startOffset = 305, endOffset = 312, displayOffset = 36, value = tmp_5), EqualityExpression(startOffset = 276, endOffset = 318, displayOffset = 45, value = tmp_6, lhs = tmp_5, rhs = 5)])))])).toDefaultMessage()
          }
)
        }
        else -> { // BLOCK
          val tmp_7: Boolean = EQEQ(arg0 = tmp_3, arg1 = 5)
          assert(value = tmp_7, lazyMessage = local fun <anonymous>(): String {
            return "\n" + CallDiagram(source = "assert((str?.lowercase()?.length ?: default) == 5)", dispatchReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [Expression(startOffset = 277, endOffset = 280, displayOffset = 8, value = tmp_0), Expression(startOffset = 282, endOffset = 293, displayOffset = 13, value = tmp_1), Expression(startOffset = 295, endOffset = 301, displayOffset = 26, value = tmp_3), EqualityExpression(startOffset = 276, endOffset = 318, displayOffset = 45, value = tmp_7, lhs = tmp_3, rhs = 5)])))])).toDefaultMessage()
          }
)
        }
      }
    }
  }
)
}

fun test2(str: String?, fallback: String?, default: Int): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    { // BLOCK
      val tmp_8: String? = str
      val tmp_9: String? = { // BLOCK
        val tmp_10: String? = tmp_8
        when {
          EQEQ(arg0 = tmp_10, arg1 = null) -> null
          else -> tmp_10.lowercase()
        }
      }
      when {
        EQEQ(arg0 = tmp_9, arg1 = null) -> { // BLOCK
          val tmp_11: String? = fallback
          val tmp_12: Int? = { // BLOCK
            val tmp_13: String? = tmp_11
            when {
              EQEQ(arg0 = tmp_13, arg1 = null) -> null
              else -> tmp_13.<get-length>()
            }
          }
          when {
            EQEQ(arg0 = tmp_12, arg1 = null) -> { // BLOCK
              val tmp_14: Int = default
              val tmp_15: Boolean = EQEQ(arg0 = tmp_14, arg1 = 5)
              assert(value = tmp_15, lazyMessage = local fun <anonymous>(): String {
                return "\n" + CallDiagram(source = "assert(((str?.lowercase() ?: fallback)?.length ?: default) == 5)", dispatchReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [Expression(startOffset = 420, endOffset = 423, displayOffset = 9, value = tmp_8), Expression(startOffset = 425, endOffset = 436, displayOffset = 14, value = tmp_9), Expression(startOffset = 440, endOffset = 448, displayOffset = 29, value = tmp_11), Expression(startOffset = 451, endOffset = 457, displayOffset = 40, value = tmp_12), Expression(startOffset = 461, endOffset = 468, displayOffset = 50, value = tmp_14), EqualityExpression(startOffset = 418, endOffset = 474, displayOffset = 59, value = tmp_15, lhs = tmp_14, rhs = 5)])))])).toDefaultMessage()
              }
)
            }
            else -> { // BLOCK
              val tmp_16: Boolean = EQEQ(arg0 = tmp_12, arg1 = 5)
              assert(value = tmp_16, lazyMessage = local fun <anonymous>(): String {
                return "\n" + CallDiagram(source = "assert(((str?.lowercase() ?: fallback)?.length ?: default) == 5)", dispatchReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [Expression(startOffset = 420, endOffset = 423, displayOffset = 9, value = tmp_8), Expression(startOffset = 425, endOffset = 436, displayOffset = 14, value = tmp_9), Expression(startOffset = 440, endOffset = 448, displayOffset = 29, value = tmp_11), Expression(startOffset = 451, endOffset = 457, displayOffset = 40, value = tmp_12), EqualityExpression(startOffset = 418, endOffset = 474, displayOffset = 59, value = tmp_16, lhs = tmp_12, rhs = 5)])))])).toDefaultMessage()
              }
)
            }
          }
        }
        else -> { // BLOCK
          val tmp_17: Int? = { // BLOCK
            val tmp_18: String? = tmp_9
            when {
              EQEQ(arg0 = tmp_18, arg1 = null) -> null
              else -> tmp_18.<get-length>()
            }
          }
          when {
            EQEQ(arg0 = tmp_17, arg1 = null) -> { // BLOCK
              val tmp_19: Int = default
              val tmp_20: Boolean = EQEQ(arg0 = tmp_19, arg1 = 5)
              assert(value = tmp_20, lazyMessage = local fun <anonymous>(): String {
                return "\n" + CallDiagram(source = "assert(((str?.lowercase() ?: fallback)?.length ?: default) == 5)", dispatchReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [Expression(startOffset = 420, endOffset = 423, displayOffset = 9, value = tmp_8), Expression(startOffset = 425, endOffset = 436, displayOffset = 14, value = tmp_9), Expression(startOffset = 451, endOffset = 457, displayOffset = 40, value = tmp_17), Expression(startOffset = 461, endOffset = 468, displayOffset = 50, value = tmp_19), EqualityExpression(startOffset = 418, endOffset = 474, displayOffset = 59, value = tmp_20, lhs = tmp_19, rhs = 5)])))])).toDefaultMessage()
              }
)
            }
            else -> { // BLOCK
              val tmp_21: Boolean = EQEQ(arg0 = tmp_17, arg1 = 5)
              assert(value = tmp_21, lazyMessage = local fun <anonymous>(): String {
                return "\n" + CallDiagram(source = "assert(((str?.lowercase() ?: fallback)?.length ?: default) == 5)", dispatchReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), extensionReceiver = Receiver(implicit = false, expressions = listOf</* null */>(elements = [])), valueParameters = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueParameter(expressions = listOf</* null */>(elements = [Expression(startOffset = 420, endOffset = 423, displayOffset = 9, value = tmp_8), Expression(startOffset = 425, endOffset = 436, displayOffset = 14, value = tmp_9), Expression(startOffset = 451, endOffset = 457, displayOffset = 40, value = tmp_17), EqualityExpression(startOffset = 418, endOffset = 474, displayOffset = 59, value = tmp_21, lhs = tmp_17, rhs = 5)])))])).toDefaultMessage()
              }
)
            }
          }
        }
      }
    }
  }
)
}

